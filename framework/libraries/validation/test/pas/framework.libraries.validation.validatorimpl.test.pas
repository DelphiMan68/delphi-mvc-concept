unit Framework.Libraries.Validation.ValidatorImpl.Test;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  System.Generics.Collections,
  Framework.Libraries.Validation.MinLengthImpl,
  Framework.Libraries.Validation.Validate,
  Framework.Libraries.Validation.ExtendValidationImpl,
  Framework.Libraries.Validation.Validator,
  Framework.Libraries.Validation.ValidatorImpl,
  Spring.Persistence.Core.Session,
  System.StrUtils,
  System.Classes,
  System.Rtti,
  Vcl.Forms,
  EditNum,
  Delphi.Mocks,
  Framework.Libraries.Connection.ConnectionFactory,
  Data.SqlExpr,
  Spring.Persistence.Core.Interfaces;

type
  TViewMock = class(TInterfacedObject)
    [ModelMapping('IsInteger')]
    EdtCodigo: TEditNum;
  end;

  TModelMock = class(TInterfacedObject)
  private
    FMaxLength: String;
    FMinValue: Integer;
    FIsNaturalNoZero: Integer;
    FIsNatural: Integer;
    FMinLength: String;
    FExactLength: String;
    FValidMail: String;
    FRequired: string;
    FMaxValue: Integer;
    FIsInteger: Integer;
    FRegexValidate: string;
  public
    [ColumnTitle('IsInteger'), IsInteger]
    property IsInteger: Integer read FIsInteger write FIsInteger;

    [ColumnTitle('IsNatural'), IsNatural]
    property IsNatural: Integer read FIsNatural write FIsNatural;

    [ColumnTitle('IsNaturalNoZero'), IsNaturalNoZero]
    property IsNaturalNoZero: Integer read FIsNaturalNoZero write FIsNaturalNoZero;

    [ColumnTitle('MaxValue'), MaxValue(1)]
    property MaxValue: Integer read FMaxValue write FMaxValue;

    [ColumnTitle('MinValue'), MinValue(1)]
    property MinValue: Integer read FMinValue write FMinValue;

    [ColumnTitle('MinLength'), MinLength(2)]
    property MinLength: String read FMinLength write FMinLength;

    [ColumnTitle('MaxLength'), MaxLength(3)]
    property MaxLength: String read FMaxLength write FMaxLength;

    [ColumnTitle('ExactLength'), ExactLength(2)]
    property ExactLength: String read FExactLength write FExactLength;

    [ColumnTitle('ValidEmail'), ValidEmail]
    property ValidMail: String read FValidMail write FValidMail;

    [ColumnTitle('RegexValidate'), RegexValidate('[A-Z]')]
    property RegexValidate: string read FRegexValidate write FRegexValidate;

    [ColumnTitle('Required'), Required]
    property Required: string read FRequired write FRequired;
  end;

  TConnectionFactoryImpl = class(TInterfacedObject, IConnectionFactory)
  private
    FDBXConnection: TSQLConnection;
    FDBConnection: IDBConnection;
    FSession: TSession;
  private
    function GetDBConnection: IDBConnection;
    function GetDBXConnection: TSQLConnection;
    function GetSession: TSession;
  public
    constructor Create(const ASession: TSession); reintroduce;
    property DBXConnection: TSQLConnection read GetDBXConnection;
    property DBConnection: IDBConnection read GetDBConnection;
    property Session: TSession read GetSession;
  end;

type
  // Test methods for class TValidator
  TestTValidator = class(TTestCase)
  public
    const
    PROP_NAME: String = 'RegexValidate';
  strict private
    FModel: TModelMock;
    FView: TViewMock;
    FValidator: IValidator;
    FConnectionFactory: IConnectionFactory;
  private
    procedure SetValueTrue;
    procedure SetValueFalse;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure AttributeNotFound;
    procedure AttributeValid;
    procedure AttributeNotValid;
    procedure ModelValid;
    procedure ModelNotValid;
    procedure ModelIsNil;
    procedure ErrorMessagesNotValid;
    procedure ErrorMessagesValid;
    procedure TestAddExtendValidateModel;
    procedure TestAddExtendValidateAttribute;
    procedure TestAddExtendValidateDuplicate;
    procedure TestAddExtendValidateAttributeSession;
    procedure TestAddExtendValidateAttributeNotFound;
    procedure AttributeValidMappedByView;
    procedure AttributeNotValidMappedByView;
  end;

implementation

uses
  System.SysUtils,
  Framework.Libraries.Validation.ResourceStrings;



procedure TestTValidator.SetUp;
begin
  FConnectionFactory := TConnectionFactoryImpl.Create(TSession.Create(nil));

  FModel               := TModelMock.Create;
  FView                := TViewMock.Create;
  FView.EdtCodigo      := TEditNum.Create(nil);
  FView.EdtCodigo.Name := 'EdtCodigo';
  FValidator           := TValidatorImpl.Create(FConnectionFactory);
end;



procedure TestTValidator.SetValueFalse;
begin
  (FModel as TModelMock).IsInteger       := 0;
  (FModel as TModelMock).IsNatural       := -1;
  (FModel as TModelMock).IsNaturalNoZero := 0;
  (FModel as TModelMock).MaxValue        := 11;
  (FModel as TModelMock).MinValue        := 0;
  (FModel as TModelMock).MaxLength       := '1111';
  (FModel as TModelMock).MinLength       := '1';
  (FModel as TModelMock).ExactLength     := '1';
  (FModel as TModelMock).ValidMail       := 'eurides.baptistella.gmail.com';
  (FModel as TModelMock).RegexValidate   := 'abc';
  (FModel as TModelMock).Required        := '';
end;



procedure TestTValidator.SetValueTrue;
begin
  (FModel as TModelMock).IsInteger       := 1;
  (FModel as TModelMock).IsNatural       := 1;
  (FModel as TModelMock).IsNaturalNoZero := 1;
  (FModel as TModelMock).MaxValue        := 1;
  (FModel as TModelMock).MinValue        := 1;
  (FModel as TModelMock).MaxLength       := '11';
  (FModel as TModelMock).MinLength       := '11';
  (FModel as TModelMock).ExactLength     := '11';
  (FModel as TModelMock).ValidMail       := 'eurides.baptistella@gmail.com';
  (FModel as TModelMock).RegexValidate   := 'ABC';
  (FModel as TModelMock).Required        := '1';
end;



procedure TestTValidator.TearDown;
begin
  FModel.Free;
  FView.EdtCodigo.Free;
  FView.Free;
  FModel := nil;
end;



procedure TestTValidator.ModelValid;
begin
  SetValueTrue;
  CheckFalse(FValidator.MakeAll(FModel).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.ErrorMessagesValid;
begin
  SetValueTrue;
  FValidator.MakeAll(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 0, 'Erro ao validar modelo');
end;



procedure TestTValidator.ModelIsNil;
begin
  StartExpectingException(Exception);
  FValidator.MakeAll(nil);
  StopExpectingException('Erro ao validar modelo');
end;



procedure TestTValidator.ModelNotValid;
begin
  SetValueFalse;
  CheckTrue(FValidator.MakeAll(FModel).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.AttributeNotFound;
begin
  SetValueTrue;
  FValidator.MakeAttribute(FModel, PROP_NAME + '_1');
  CheckEqualsString(StringReplace(StringReplace(FValidator.ErrorMessages.Text, #10, EmptyStr, [rfReplaceAll]), #13,
    EmptyStr, [rfReplaceAll]), StringReplace(StringReplace(Format(TResourceStringsValidator.RSValidator_AttrNotFound,
    [FModel.ClassName, PROP_NAME + '_1']), #10, EmptyStr, [rfReplaceAll]), #13, EmptyStr, [rfReplaceAll]));
end;



procedure TestTValidator.AttributeNotValid;
begin
  SetValueFalse;
  CheckTrue(FValidator.MakeAttribute(FModel, PROP_NAME).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.AttributeNotValidMappedByView;
begin
  SetValueFalse;

  CheckFalse(FValidator.MakeAttribute(FModel, TForm(FView), FView.EdtCodigo).Fails, 'Erro ao validar atributo mapeado pela view');
end;



procedure TestTValidator.AttributeValid;
begin
  SetValueTrue;
  CheckFalse(FValidator.MakeAttribute(FModel, PROP_NAME).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.ErrorMessagesNotValid;
begin
  SetValueFalse;
  FValidator.MakeAll(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 10, 'Erro ao validar modelo');
end;



procedure TestTValidator.TestAddExtendValidateAttribute;
begin
  SetValueTrue;
  FValidator.AddExtend(PROP_NAME, 1, 'Extend true',
    function(const AValue: TValue): Boolean
    begin
      result := True;
    end
    );

  FValidator.MakeAttribute(FModel, PROP_NAME);
  CheckTrue(FValidator.ErrorMessages.Count = 0, 'Erro ao validar extend');
end;



procedure TestTValidator.AttributeValidMappedByView;
begin
  SetValueTrue;

  FValidator.MakeAttribute(FModel, TForm(FView), FView.EdtCodigo);
  CheckTrue(FValidator.ErrorMessages.Count = 0, 'Erro ao validar extend');
end;



procedure TestTValidator.TestAddExtendValidateAttributeNotFound;
begin
  SetValueTrue;
  FValidator.AddExtend(PROP_NAME + '_1', 1, 'Extend true',
    function(const AValue: TValue): Boolean
    begin
      result := True;
    end
    );

  FValidator.MakeAttribute(FModel, PROP_NAME + '_1');
  CheckTrue(FValidator.ErrorMessages.Count = 1, 'Erro ao validar extend');
end;



procedure TestTValidator.TestAddExtendValidateAttributeSession;
begin
  SetValueTrue;
  FValidator.AddExtend(PROP_NAME, 1, 'Extend true',
    function(const AValue: TValue; const ASession: TSession): Boolean
    begin
      result := Assigned(ASession);
    end
    );

  FValidator.MakeAttribute(FModel, PROP_NAME);
  CheckTrue(FValidator.ErrorMessages.Count = 0, 'Session não foi injetada');
end;



procedure TestTValidator.TestAddExtendValidateDuplicate;
begin
  SetValueTrue;
  FValidator.AddExtend(EmptyStr, 1, 'Teste extend duplicado.',
    function(const AValue: TValue): Boolean
    begin
      result := AValue.AsInteger <> 1;
    end
    );
  FValidator.AddExtend(EmptyStr, 2, 'Teste extend duplicado.',
    function(const AValue: TValue): Boolean
    begin
      result := AValue.AsInteger <> 2;
    end
    );
  FValidator.AddExtend(EmptyStr, 3, 'Teste extend duplicado.',
    function(const AValue: TValue): Boolean
    begin
      result := AValue.AsInteger <> 3;
    end
    );

  FValidator.MakeAll(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 1, 'Erro ao validar extend');
end;



procedure TestTValidator.TestAddExtendValidateModel;
begin
  SetValueTrue;
  FValidator.AddExtend(EmptyStr, 1, 'Teste extend: valor informado %s  é igual a 1.',
    function(const AValue: TValue): Boolean
    begin
      result := AValue.AsInteger <> 1;
    end
    );

  FValidator.MakeAll(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 1, 'Erro ao validar extend');
end;

{ TConnectionFactoryImpl }



constructor TConnectionFactoryImpl.Create(const ASession: TSession);
begin
  FSession := ASession;
end;



function TConnectionFactoryImpl.GetDBConnection: IDBConnection;
begin
  result := FDBConnection;
end;



function TConnectionFactoryImpl.GetDBXConnection: TSQLConnection;
begin
  result := FDBXConnection;
end;



function TConnectionFactoryImpl.GetSession: TSession;
begin
  result := FSession;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTValidator.Suite);

end.
