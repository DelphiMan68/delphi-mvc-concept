unit Framework.Libraries.Validation.RegexValidateImpl.Test;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  Framework.Libraries.Validation.Validate,
  Framework.Libraries.Validation.ValidateCustomAttributeImpl,
  Framework.Libraries.Validation.RegexValidateImpl,
  System.Rtti;

type
  // Test methods for class TRegexValidate

  TestTRegexValidate = class(TTestCase)
  strict private
    FRegexValidate: TRegexValidateImpl;
  public
    const
    COLUMN_NAME: String = 'MyProp';
    Regex: String = '';
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure GetErrorMessage;
    procedure AplhaTrue;
    procedure AplhaFalse;
    procedure NumbersTrue;
    procedure NumbersFalse;
    procedure AplhaNumericTrue;
    procedure AplhaNumericFalse;
  end;

implementation

uses
  System.SysUtils,
  Framework.Libraries.Validation.ResourceStrings;



procedure TestTRegexValidate.SetUp;
begin
  FRegexValidate := TRegexValidateImpl.Create(Regex);
end;



procedure TestTRegexValidate.TearDown;
begin
  FRegexValidate.Free;
  FRegexValidate := nil;
end;



procedure TestTRegexValidate.GetErrorMessage;
begin
  CheckTrue(FRegexValidate.GetErrorMessage = TResourceStringsValidator.RSValidation_RegexValidate,
    'Erro ao formatar mensagem');
end;



procedure TestTRegexValidate.AplhaTrue;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[a-zA-Z]*$');
  try
    AValue := 'ABBCASDU';
    CheckTrue(oValidate.isValid(AValue), 'Erro ao validar aplha ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;



procedure TestTRegexValidate.AplhaFalse;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[a-zA-Z]*$');
  try
    AValue := '9ABBCASDU';
    CheckFalse(oValidate.isValid(AValue), 'Erro ao validar aplha ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;



procedure TestTRegexValidate.AplhaNumericTrue;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[a-zA-Z0-9]*$');
  try
    AValue := 'A9a';
    CheckTrue(oValidate.isValid(AValue), 'Erro ao validar aplhanumeric ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;



procedure TestTRegexValidate.AplhaNumericFalse;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[a-zA-Z0-9]*$');
  try
    AValue := '()*&*(&kjasdASD';
    CheckFalse(oValidate.isValid(AValue), 'Erro ao validar aplhanumeric ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;



procedure TestTRegexValidate.NumbersTrue;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[0-9]*$');
  try
    AValue := '0123';
    CheckTrue(oValidate.isValid(AValue), 'Erro ao validar numeric ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;



procedure TestTRegexValidate.NumbersFalse;
var
  AValue: TValue;
  oValidate: TRegexValidateImpl;
begin
  oValidate := TRegexValidateImpl.Create('^[0-9]*$');
  try
    AValue := '0a123';
    CheckFalse(oValidate.isValid(AValue), 'Erro ao validar numeric ' + AValue.ToString);
  finally
    oValidate.Free;
  end;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTRegexValidate.Suite);

end.
